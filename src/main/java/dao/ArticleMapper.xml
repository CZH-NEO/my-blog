<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="dao.ArticleMapper">
  <resultMap id="BaseResultMap" type="model.Article">
    <id column="articleId" jdbcType="INTEGER" property="articleid" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="isPrivated" jdbcType="BIT" property="isprivated" />
    <result column="isBlogOrScript" jdbcType="BIT" property="isblogorscript" />
    <result column="isGabage" jdbcType="BIT" property="isgabage" />
    <result column="readNum" jdbcType="INTEGER" property="readnum" />
    <result column="commentNum" jdbcType="INTEGER" property="commentnum" />
    <result column="createdTime" jdbcType="TIMESTAMP" javaType="Date" property="createdtime" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="model.Article">
    <result column="text" jdbcType="LONGVARCHAR" property="text" />
  </resultMap>
  <sql id="Base_Column_List">
    articleId, title, isPrivated, isBlogOrScript, isGabage, readNum, commentNum, createdTime
  </sql>
  <sql id="Blob_Column_List">
    text
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from blog_articles
    where articleId = #{articleid,jdbcType=INTEGER}
  </select>
  <select id="selectAllArticle" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from blog_articles
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from blog_articles
    where articleId = #{articleid,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="model.Article">
    insert into blog_articles (articleId, title, isPrivated, 
      isBlogOrScript, isGabage, readNum, 
      commentNum, createdTime, text
      )
    values (#{articleid,jdbcType=INTEGER}, #{title,jdbcType=VARCHAR}, #{isprivated,jdbcType=BIT}, 
      #{isblogorscript,jdbcType=BIT}, #{isgabage,jdbcType=BIT}, #{readnum,jdbcType=INTEGER}, 
      #{commentnum,jdbcType=INTEGER}, #{createdtime,jdbcType=TIMESTAMP}, #{text,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="model.Article">
    insert into blog_articles
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="articleid != null">
        articleId,
      </if>
      <if test="title != null">
        title,
      </if>
      <if test="isprivated != null">
        isPrivated,
      </if>
      <if test="isblogorscript != null">
        isBlogOrScript,
      </if>
      <if test="isgabage != null">
        isGabage,
      </if>
      <if test="readnum != null">
        readNum,
      </if>
      <if test="commentnum != null">
        commentNum,
      </if>
      <if test="createdtime != null">
        createdTime,
      </if>
      <if test="text != null">
        text,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="articleid != null">
        #{articleid,jdbcType=INTEGER},
      </if>
      <if test="title != null">
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="isprivated != null">
        #{isprivated,jdbcType=BIT},
      </if>
      <if test="isblogorscript != null">
        #{isblogorscript,jdbcType=BIT},
      </if>
      <if test="isgabage != null">
        #{isgabage,jdbcType=BIT},
      </if>
      <if test="readnum != null">
        #{readnum,jdbcType=INTEGER},
      </if>
      <if test="commentnum != null">
        #{commentnum,jdbcType=INTEGER},
      </if>
      <if test="createdtime != null">
        #{createdtime,jdbcType=TIMESTAMP},
      </if>
      <if test="text != null">
        #{text,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="model.Article">
    update blog_articles
    <set>
      <if test="title != null">
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="isprivated != null">
        isPrivated = #{isprivated,jdbcType=BIT},
      </if>
      <if test="isblogorscript != null">
        isBlogOrScript = #{isblogorscript,jdbcType=BIT},
      </if>
      <if test="isgabage != null">
        isGabage = #{isgabage,jdbcType=BIT},
      </if>
      <if test="readnum != null">
        readNum = #{readnum,jdbcType=INTEGER},
      </if>
      <if test="commentnum != null">
        commentNum = #{commentnum,jdbcType=INTEGER},
      </if>
      <if test="createdtime != null">
        createdTime = #{createdtime,jdbcType=TIMESTAMP},
      </if>
      <if test="text != null">
        text = #{text,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where articleId = #{articleid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="model.Article">
    update blog_articles
    set title = #{title,jdbcType=VARCHAR},
      isPrivated = #{isprivated,jdbcType=BIT},
      isBlogOrScript = #{isblogorscript,jdbcType=BIT},
      isGabage = #{isgabage,jdbcType=BIT},
      readNum = #{readnum,jdbcType=INTEGER},
      commentNum = #{commentnum,jdbcType=INTEGER},
      createdTime = #{createdtime,jdbcType=TIMESTAMP},
      text = #{text,jdbcType=LONGVARCHAR}
    where articleId = #{articleid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="model.Article">
    update blog_articles
    set title = #{title,jdbcType=VARCHAR},
      isPrivated = #{isprivated,jdbcType=BIT},
      isBlogOrScript = #{isblogorscript,jdbcType=BIT},
      isGabage = #{isgabage,jdbcType=BIT},
      readNum = #{readnum,jdbcType=INTEGER},
      commentNum = #{commentnum,jdbcType=INTEGER},
      createdTime = #{createdtime,jdbcType=TIMESTAMP}
    where articleId = #{articleid,jdbcType=INTEGER}
  </update>
</mapper>